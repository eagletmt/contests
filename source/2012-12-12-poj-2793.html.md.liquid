---
layout: post
title: "POJ 2793 - Cactus"
---
[http://poj.org/problem?id=2793](http://poj.org/problem?id=2793)

## 概要
どの辺も高々1つのシンプルな閉路にしか含まれていないような連結無向グラフを cactus と呼ぶ。
あるグラフが cactus なとき、cactus な全域部分グラフをいくつも考えることができる。
あるグラフの cactusness を、そのグラフの全域部分グラフのうち cactus なものの数と定義したとき、
与えられた \\(n\\) 頂点のグラフの cactusness を答える。
ただし、与えられたグラフがそもそも cactus でないときの cactusness は 0 と定義する。

入力は \\(m\\) 個のパス情報からなり、\\(i\\) 番目のパス情報には \\(k\_i\\) 個の頂点が並んでおり、
この順に頂点を結ぶ無向辺が存在することを表している。

## 制約
- \\(1 \\le n \\le 2 \\cdot 10 ^ 4\\)
- \\(0 \\le m \\le 10 ^ 3\\)
- \\(2 \\le k\_i \\le 10 ^ 3\\)
- cactusness は非常に大きな数になりうる

## 解法
辺にマークをつけながら DFS して、
閉路を検出したらそこに含まれている辺のすべてに閉路に含まれているマークをつけ、
そのときに既に辺に閉路マークがついていたら2つの閉路に含まれていることになるため cactus でないことがわかる。

与えられた無向グラフが cactus であるとき、cactusness は閉路の長さから計算できる。
閉路に含まれていない辺を取り除くと連結でなくなってしまうので、これを取り除くことはできない。
閉路に含まれている辺に関しては、1つの閉路にしか含まれていないため、その閉路からは高々1つの辺しか取り除くことができない。
よって、長さ \\(l\\) の閉路からは、どれか1つの辺を取り除くか、どの辺も取り除かない \\(l+1\\) 通りの cactus な部分グラフが得られる。
したがって、各閉路の長さを \\(l\_i\\) とすると、\\(l\_i + 1\\) の積が cactusness となる

BigInteger のために Java で。

{% include_code lang:cpp poj/2793.java %}
